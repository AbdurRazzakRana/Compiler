# MIPS CODE GENERATED BY Compliler Class

.data
_L0: .asciiz    "\n-->FUNC START: test_read_write_global\n" 
_L1: .asciiz    "This function will read an variable and set to global array index and print from there\n" 
_L2: .asciiz    "enter X " 
_L3: .asciiz    "Should print x, that is in A[10]\n" 
_L4: .asciiz    "\n" 
_L5: .asciiz    "-->FUNC END\n" 
_L6: .asciiz    "\n-->FUNC START: test_while_loop\n" 
_L7: .asciiz    "This function will run a nested loop, outer loop for 3 and an inner loop for 3\n" 
_L8: .asciiz    " " 
_L9: .asciiz    "\n" 
_L10: .asciiz    "\n-->FUNC END\n" 
_L11: .asciiz    "\n-->FUNC START: test_read_write_array_global\n" 
_L12: .asciiz    "This function will read 5 numbers into global array and print sqare of them\n" 
_L13: .asciiz    "enter X " 
_L14: .asciiz    "\n" 
_L15: .asciiz    "\n-->FUNC END\n" 
_L16: .asciiz    "\n-->FUNC START: test_double_array\n" 
_L17: .asciiz    "This function will show double array use cases such as A[B[5]]\n" 
_L18: .asciiz    " Simple Array Checking \n" 
_L19: .asciiz    "This should print out 10\n" 
_L20: .asciiz    "\n" 
_L21: .asciiz    "\n-->FUNC END\n" 
_L22: .asciiz    "\n-->FUNC START: test_array_passing\n" 
_L23: .asciiz    "This function will receives array as parameter and collaborate with local array\n" 
_L24: .asciiz    "should print 63\n" 
_L25: .asciiz    "\n-->FUNC END\n" 
_L26: .asciiz    "\n-->FUNC START: test_array_passing\n" 
_L27: .asciiz    "This function will test unary operations\n" 
_L28: .asciiz    "\nwill print -21\n" 
_L29: .asciiz    "\n" 
_L30: .asciiz    "\nwill print -5\n" 
_L31: .asciiz    "\n" 
_L32: .asciiz    "\nwill print -10\n" 
_L33: .asciiz    "\n" 
_L34: .asciiz    "\nwill print 10\n" 
_L35: .asciiz    "\n" 
_L36: .asciiz    "\n-->FUNC END\n" 
_L37: .asciiz    "\n-->FUNC START: test_break_continue\n" 
_L38: .asciiz    "This function will test break, contine, 4 will not print for continue, after 6 break the loop\n" 
_L39: .asciiz    "\n" 
_L40: .asciiz    "\n-->FUNC END\n" 
_L41: .asciiz    "\n-->FUNC START: test_if_else\n" 
_L42: .asciiz    "This function will show if else, if loop value is even it will sum them, else print the number\n" 
_L43: .asciiz    " " 
_L44: .asciiz    "\nSum is: " 
_L45: .asciiz    "\n-->FUNC END\n" 
_L46: .asciiz    "\n ####  MAIN FUNC START ####\n" 
_L47: .asciiz    "\n ####  MAIN FUNC END ####\n" 

.align 2
x: .space 4 # global varaible
y: .space 4 # global varaible
z: .space 4 # global varaible
A: .space 400 # global varaible
a: .space 4 # global varaible
arr: .space 4 # global varaible
b: .space 4 # global varaible
c: .space 4 # global varaible
p: .space 4 # global varaible
.text

.globl main

test_read_write_global:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 12		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	la $a0, _L0		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L1		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L2		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, x		# EMIT Var global variable
	li $v0, 5		# about to read in value
	syscall		# read in value $v0 now has the read in value
	sw $v0, ($a0)		# store read in vlaue to memory


	la $a0, _L3		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, x		# EMIT Var global variable
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0 8($sp)		# Assign store RHS temporarily
	li $a0, 10		# Expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	la $a0, A		# EMIT Var global variable
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a1 8($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	li $a0, 10		# Expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	la $a0, A		# EMIT Var global variable
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L4		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L5		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	jr $ra		# Jump to the caller address
			# END OF FUNCTION test_read_write_global

test_while_loop:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 44		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	la $a0, _L6		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L7		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# Expression is a constant
	sw $a0 16($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 16($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	li $a0, 0		# Expression is a constant
	sw $a0 20($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a1 20($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


_L48:		#While Loop START
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 24($sp)		# LHS of expression stored into temp memory
	li $a0, 3		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 24($sp)		# Getting LHS into a0 from mem
	slt $a0, $a0, $a1		# Expression Less Than
	beq $a0 $0 _L49		# WHILE branch out taking decision
	li $a0, 0		# Expression is a constant
	sw $a0 28($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a1 28($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


_L50:		#While Loop START
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 32($sp)		# LHS of expression stored into temp memory
	li $a0, 3		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 32($sp)		# Getting LHS into a0 from mem
	slt $a0, $a0, $a1		# Expression Less Than
	beq $a0 $0 _L51		# WHILE branch out taking decision
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L8		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L9		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 36($sp)		# LHS of expression stored into temp memory
	li $a0, 1		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 36($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0 40($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a1 40($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	j _L50		# Jump to loop level again, loop continue
_L51:		#While Loop END
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 36($sp)		# LHS of expression stored into temp memory
	li $a0, 1		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 36($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0 40($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 40($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	j _L48		# Jump to loop level again, loop continue
_L49:		#While Loop END
	la $a0, _L10		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	jr $ra		# Jump to the caller address
			# END OF FUNCTION test_while_loop

test_read_write_array_global:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 40		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	la $a0, _L11		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L12		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# Expression is a constant
	sw $a0 12($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 12($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


_L52:		#While Loop START
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 16($sp)		# LHS of expression stored into temp memory
	li $a0, 5		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 16($sp)		# Getting LHS into a0 from mem
	slt $a0, $a0, $a1		# Expression Less Than
	beq $a0 $0 _L53		# WHILE branch out taking decision
	la $a0, _L13		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	la $a0, A		# EMIT Var global variable
	add $a0 $a0 $a1		# VAR array add internal offset
	li $v0, 5		# about to read in value
	syscall		# read in value $v0 now has the read in value
	sw $v0, ($a0)		# store read in vlaue to memory


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 20($sp)		# LHS of expression stored into temp memory
	li $a0, 1		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 20($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0 24($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 24($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	j _L52		# Jump to loop level again, loop continue
_L53:		#While Loop END
	li $a0, 0		# Expression is a constant
	sw $a0 20($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 20($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


_L54:		#While Loop START
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 24($sp)		# LHS of expression stored into temp memory
	li $a0, 5		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 24($sp)		# Getting LHS into a0 from mem
	slt $a0, $a0, $a1		# Expression Less Than
	beq $a0 $0 _L55		# WHILE branch out taking decision
	la $a0, _L14		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	la $a0, A		# EMIT Var global variable
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 28($sp)		# LHS of expression stored into temp memory
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	la $a0, A		# EMIT Var global variable
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# RHS on a1
	lw $a0, 28($sp)		# Getting LHS into a0 from mem
	mult $a0 $a1		# Multiply Expression
	mflo $a0		# Setting low 32 bits into a0 after multiply
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 32($sp)		# LHS of expression stored into temp memory
	li $a0, 1		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 32($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0 36($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 36($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	j _L54		# Jump to loop level again, loop continue
_L55:		#While Loop END
	la $a0, _L15		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	jr $ra		# Jump to the caller address
			# END OF FUNCTION test_read_write_array_global

test_double_array:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 108		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	la $a0, _L16		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L17		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L18		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 1		# Expression is a constant
	sw $a0 92($sp)		# Assign store RHS temporarily
	li $a0, 0		# Expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a1 92($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	li $a0, 2		# Expression is a constant
	sw $a0 96($sp)		# Assign store RHS temporarily
	li $a0, 1		# Expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a1 96($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	li $a0, 1		# Expression is a constant
	sw $a0 100($sp)		# Assign store RHS temporarily
	li $a0, 5		# Expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 52		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a1 100($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	li $a0, 10		# Expression is a constant
	sw $a0 104($sp)		# Assign store RHS temporarily
	li $a0, 5		# Expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 52		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a1 104($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	la $a0, _L19		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 1		# Expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L20		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L21		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	jr $ra		# Jump to the caller address
			# END OF FUNCTION test_double_array

test_array_passing:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 80		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	sw $t0 8($sp)		# Store value from temp registers into funcion sp + offset pos
	sw $t1 12($sp)		# Store value from temp registers into funcion sp + offset pos
	sw $t2 16($sp)		# Store value from temp registers into funcion sp + offset pos
	la $a0, _L22		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L23		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 10		# Expression is a constant
	sw $a0 64($sp)		# Assign store RHS temporarily
	li $a0, 2		# Expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 24		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a1 64($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	la $a0, _L24		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 3		# Expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0 ($a0)		# Array address accessed as it passed as params in func
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 68($sp)		# LHS of expression stored into temp memory
	li $a0, 2		# Expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 24		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# RHS on a1
	lw $a0, 68($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0, 72($sp)		# LHS of expression stored into temp memory
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# RHS on a1
	lw $a0, 72($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0, 76($sp)		# LHS of expression stored into temp memory
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 16		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# RHS on a1
	lw $a0, 76($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L25		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	jr $ra		# Jump to the caller address
			# END OF FUNCTION test_array_passing

f:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 12		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

			# Return Statement explicitely mentioned
	li $a0, -1		# For Unary Operation, load -1 first
	sw $a0, 8($sp)		# Store -1 to the appropriate offset memory
	li $a0, 10		# Expression is a constant
	move $a1, $a0		# Move Right factor value into a1
	lw $a0, 8($sp)		# Getting previously stored -1 into a0
	mult $a0 $a1		# Multiply Expression
	mflo $a0		# Setting low 32 bits into a0 after multiply
	lw $ra ($sp)		# Load the old environment RA
	lw $sp 4($sp)		# Return from function stack pointer

	jr $ra		# Jump to the caller address
	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	jr $ra		# Jump to the caller address
			# END OF FUNCTION f

test_unary:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 28		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	la $a0, _L26		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L27		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 21		# Expression is a constant
	sw $a0 12($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 12($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	la $a0, _L28		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, -1		# For Unary Operation, load -1 first
	sw $a0, 16($sp)		# Store -1 to the appropriate offset memory
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# Move Right factor value into a1
	lw $a0, 16($sp)		# Getting previously stored -1 into a0
	mult $a0 $a1		# Multiply Expression
	mflo $a0		# Setting low 32 bits into a0 after multiply
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L29		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L30		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, -1		# For Unary Operation, load -1 first
	sw $a0, 20($sp)		# Store -1 to the appropriate offset memory
	li $a0, 5		# Expression is a constant
	move $a1, $a0		# Move Right factor value into a1
	lw $a0, 20($sp)		# Getting previously stored -1 into a0
	mult $a0 $a1		# Multiply Expression
	mflo $a0		# Setting low 32 bits into a0 after multiply
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L31		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L32		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	jal f		# Function Call

	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L33		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L34		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, -1		# For Unary Operation, load -1 first
	sw $a0, 24($sp)		# Store -1 to the appropriate offset memory
	jal f		# Function Call

	move $a1, $a0		# Move Right factor value into a1
	lw $a0, 24($sp)		# Getting previously stored -1 into a0
	mult $a0 $a1		# Multiply Expression
	mflo $a0		# Setting low 32 bits into a0 after multiply
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L35		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L36		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	jr $ra		# Jump to the caller address
			# END OF FUNCTION test_unary

test_break_continue:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 44		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	sw $t0 8($sp)		# Store value from temp registers into funcion sp + offset pos
	la $a0, _L37		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L38		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# Expression is a constant
	sw $a0 20($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a1 20($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


_L56:		#While Loop START
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 24($sp)		# LHS of expression stored into temp memory
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# RHS on a1
	lw $a0, 24($sp)		# Getting LHS into a0 from mem
	add $a1, $a1, 1		# Less Than Equal Expr, incrementing RHS by one
	slt $a0, $a0, $a1		# Now check is the LHS is less than RHS
	beq $a0 $0 _L57		# WHILE branch out taking decision
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 28($sp)		# LHS of expression stored into temp memory
	li $a0, 1		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 28($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0 32($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a1 32($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 36($sp)		# LHS of expression stored into temp memory
	li $a0, 4		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 36($sp)		# Getting LHS into a0 from mem
	slt $t0, $a0, $a1		# To check equal, taking less than of a0<a1
	slt $t1, $a1, $a0		# Now check a1<a0 and store another temp var
	nor $a0, $t0, $t1		# Nor gate will show the proper output
	andi $a0, 1		# And to make sure the answer value is only 1 at 0th index
	beq $a0 $0 _L58		# IF branch decision, taken to else condidion or continue to if body
	j _L56		# Continue to the loop begin and skip rest part of the loop 
	j _L59		# As else is not taken, jump to loop end
_L58:		#Else target level if the branch is taken
_L59:		# End of If Scope
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 40($sp)		# LHS of expression stored into temp memory
	li $a0, 6		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 40($sp)		# Getting LHS into a0 from mem
	slt $a0, $a1, $a0		# Greater Than check is same chekcing LT reverse
	beq $a0 $0 _L60		# IF branch decision, taken to else condidion or continue to if body
	j _L57		# Break the loop and jump to Loop End
	j _L61		# As else is not taken, jump to loop end
_L60:		#Else target level if the branch is taken
_L61:		# End of If Scope
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L39		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	j _L56		# Jump to loop level again, loop continue
_L57:		#While Loop END
	la $a0, _L40		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	jr $ra		# Jump to the caller address
			# END OF FUNCTION test_break_continue

test_if_else:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 44		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	la $a0, _L41		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	la $a0, _L42		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# Expression is a constant
	sw $a0 16($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 16($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	li $a0, 0		# Expression is a constant
	sw $a0 20($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a1 20($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


_L62:		#While Loop START
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 24($sp)		# LHS of expression stored into temp memory
	li $a0, 10		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 24($sp)		# Getting LHS into a0 from mem
	slt $a0, $a0, $a1		# Expression Less Than
	beq $a0 $0 _L63		# WHILE branch out taking decision
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 28($sp)		# LHS of expression stored into temp memory
	li $a0, 2		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 28($sp)		# Getting LHS into a0 from mem
	div $a0 $a1		# Mod Expression, devide first
	mfhi $a0		# Among the 64 bits, high 32 keeps the reminder
	sw $a0, 32($sp)		# LHS of expression stored into temp memory
	li $a0, 0		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 32($sp)		# Getting LHS into a0 from mem
	slt $t0, $a0, $a1		# To check equal, taking less than of a0<a1
	slt $t1, $a1, $a0		# Now check a1<a0 and store another temp var
	nor $a0, $t0, $t1		# Nor gate will show the proper output
	andi $a0, 1		# And to make sure the answer value is only 1 at 0th index
	beq $a0 $0 _L64		# IF branch decision, taken to else condidion or continue to if body
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 36($sp)		# LHS of expression stored into temp memory
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	move $a1, $a0		# RHS on a1
	lw $a0, 36($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0 40($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a1 40($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	j _L65		# As else is not taken, jump to loop end
_L64:		#Else target level if the branch is taken
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L43		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


_L65:		# End of If Scope
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 36($sp)		# LHS of expression stored into temp memory
	li $a0, 1		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 36($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0 40($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 40($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	j _L62		# Jump to loop level again, loop continue
_L63:		#While Loop END
	la $a0, _L44		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L45		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	jr $ra		# Jump to the caller address
			# END OF FUNCTION test_if_else

main:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 48		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	la $a0, _L46		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	jal test_read_write_global		# Function Call

	jal test_if_else		# Function Call

	jal test_while_loop		# Function Call

	jal test_read_write_array_global		# Function Call

	jal test_unary		# Function Call

	li $a0, 23		# Expression is a constant
	sw $a0 28($sp)		# Assign store RHS temporarily
	li $a0, 3		# Expression is a constant
	move $a1, $a0		# VAR copy index array in a1
	sll $a1 $a1 2		# Muliply the index by wordszie via SLL
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# VAR array add internal offset
	lw $a1 28($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	li $a0, 10		# Expression is a constant
	sw $a0, 40($sp)		# Store arg into memory offset location
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	sw $a0, 36($sp)		# Store arg into memory offset location
	li $a0, 20		# Expression is a constant
	sw $a0, 32($sp)		# Store arg into memory offset location
	lw $a0, 40($sp)		# Previously stored arg Load into a0
	move $t0, $a0		# Arg to temp
	lw $a0, 36($sp)		# Previously stored arg Load into a0
	move $t1, $a0		# Arg to temp
	lw $a0, 32($sp)		# Previously stored arg Load into a0
	move $t2, $a0		# Arg to temp
	jal test_array_passing		# Function Call

	li $a0, 10		# Expression is a constant
	sw $a0, 44($sp)		# Store arg into memory offset location
	lw $a0, 44($sp)		# Previously stored arg Load into a0
	move $t0, $a0		# Arg to temp
	jal test_break_continue		# Function Call

	la $a0, _L47		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	li $v0, 10		# Exit from Main, we are done
	syscall		# Exit everything
			# END OF FUNCTION main

