# MIPS CODE GENERATED BY Compliler Class

.data
_L0: .asciiz    "inside f\n" 
_L1: .asciiz    "\n" 
_L2: .asciiz    "\nshould have written 3\n" 

.align 2
x4: .space 400 # global varaible
.text

.globl main

f:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 16		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	sw $t0 8($sp)		# Store value from temp registers into funcion sp + offset pos
	la $a0, _L0		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L1		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


			# Return Statement explicitely mentioned
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 12($sp)		# LHS of expression stored into temp memory
	li $a0, 1		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 12($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	lw $ra ($sp)		# Load the old environment RA
	lw $sp 4($sp)		# Return from function stack pointer

	jr $ra		# Jump to the caller address
	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	jr $ra		# Jump to the caller address
			# END OF FUNCTION f

main:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 36		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	li $a0, 5		# Expression is a constant
	sw $a0 16($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a1 16($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	li $a0, 2		# Expression is a constant
	sw $a0 20($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 20($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 24($sp)		# LHS of expression stored into temp memory
	li $a0, 2		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 24($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0, 28($sp)		# Store arg into memory offset location
	lw $a0, 28($sp)		# Previously stored arg Load into a0
	move $t0, $a0		# Arg to temp
	jal f		# Function Call

	sw $a0 32($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 32($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L2		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	li $v0, 10		# Exit from Main, we are done
	syscall		# Exit everything
			# END OF FUNCTION main

