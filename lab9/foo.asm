# MIPS CODE GENERATED BY Compliler Class

.data
_L0: .asciiz    " " 
_L1: .asciiz    "\n" 

.align 2
.text

.globl main

main:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 44		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	li $a0, 0		# Expression is a constant
	sw $a0 16($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 16($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	li $a0, 0		# Expression is a constant
	sw $a0 20($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a1 20($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


_L2:		#While Loop START
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 24($sp)		# LHS of expression stored into temp memory
	li $a0, 3		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 24($sp)		# Getting LHS into a0 from mem
	slt $a0, $a0, $a1		# Expression Less Than
	beq $a0 $0 _L3		# WHILE branch out taking decision
	li $a0, 0		# Expression is a constant
	sw $a0 28($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a1 28($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


_L4:		#While Loop START
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 32($sp)		# LHS of expression stored into temp memory
	li $a0, 3		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 32($sp)		# Getting LHS into a0 from mem
	slt $a0, $a0, $a1		# Expression Less Than
	beq $a0 $0 _L5		# WHILE branch out taking decision
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L0		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	la $a0, _L1		# The string address
	li $v0, 4		# About to print a string
	syscall		# Call write string


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 36($sp)		# LHS of expression stored into temp memory
	li $a0, 1		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 36($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0 40($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# VAR local stack pointer plus offset
	lw $a1 40($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	j _L4		# Jump to loop level again, loop continue
_L5:		#While Loop END
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 36($sp)		# LHS of expression stored into temp memory
	li $a0, 1		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 36($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0 40($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 40($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	j _L2		# Jump to loop level again, loop continue
_L3:		#While Loop END
	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	li $v0, 10		# Exit from Main, we are done
	syscall		# Exit everything
			# END OF FUNCTION main

