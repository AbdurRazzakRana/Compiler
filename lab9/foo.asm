# MIPS CODE GENERATED BY Compliler Class

.data

.align 2
.text

.globl main

main:			# function definition
	move $a1, $sp		# Activation Record Carve out copy SP
	subi $a1 $a1 32		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return address 
	sw $sp 4($a1)		# Store the old Stack pointer
	move $sp, $a1		# Make SP the current activation record

	li $a0, 0		# Expression is a constant
	sw $a0 12($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 12($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


_L0:		#While Loop START
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 16($sp)		# LHS of expression stored into temp memory
	li $a0, 5		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 16($sp)		# Getting LHS into a0 from mem
	slt $a0, $a0, $a1		# Expression Less Than
	beq $a0 $0 _L1		# WHILE branch out taking decision
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 20($sp)		# LHS of expression stored into temp memory
	li $a0, 1		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 20($sp)		# Getting LHS into a0 from mem
	add $a0, $a0, $a1		# Add Expression and keeping value in a0
	sw $a0 24($sp)		# Assign store RHS temporarily
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a1 24($sp)		# Assign get RHS temporarily
	sw $a1 ($a0)		# Assign the RHS into the memory of LHS


	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	sw $a0, 28($sp)		# LHS of expression stored into temp memory
	li $a0, 4		# Expression is a constant
	move $a1, $a0		# RHS on a1
	lw $a0, 28($sp)		# Getting LHS into a0 from mem
	slt $t0, $a0, $a1		# To check equal, taking less than of a0<a1
	slt $t1, $a1, $a0		# Now check a1<a0 and store another temp var
	nor $a0, $t0, $t1		# Nor gate will show the proper output
	andi $a0, 1		# And to make sure the answer value is only 1 at 0th index
	beq $a0 $0 _L2		# IF branch decision, taken to else condidion or continue to if body
	j _L0		# Continue to the loop begin and skip rest part of the loop 
	j _L3		# As else is not taken, jump to loop end
_L2:		#Else target level if the branch is taken
_L3:		# End of If Scope
	move $a0 $sp		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# Expression is a VAR
	li $v0, 1		# About to print a Number
	syscall		# Call write number


	j _L0		# Jump to loop level again, loop continue
_L1:		#While Loop END
	li $a0, 0		# RETURN has no specified value set to 0
	lw $ra ($sp)		# restore old environment RA
	lw $sp 4($sp)		# Return from function store SP

	li $v0, 10		# Exit from Main, we are done
	syscall		# Exit everything
			# END OF FUNCTION main

